## library
## library
import os
import subprocess
import shutil
import glob
import re

# third party imports
#
from snakemake.utils import report

# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)),"..", "lib"))

if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)

# FIX ME

RESULT_OUTDIR = './out'

# non-login bash
shell.executable("/bin/bash")






def atoi(text):
    return int(text) if text.isdigit() else text

def natural_keys(text):

    if re.search("phasing",text):
        return [atoi(re.split('\.', text)[2])]
    else:
        return [atoi(re.split('_', text)[2])]

def orderVCF(para):
    item=list(para.pop())
    item.sort(key=natural_keys)
    return ' '.join(item)


CHRS = config['users']['chrs'].split('-')
TMP  = os.path.dirname(os.path.realpath(workflow.snakefile))
APP  = os.path.join(TMP, "../apps")
SCRIPT = os.path.join(TMP, "../lib")
chr_split = config['chr_split']
print(chr_split)

rule all:
    input:
        expand('{chr}/{chr}.Final.OK', chr=CHRS)


rule merge:
    input:
        '{chr}/{chr}.PhaseNoRef.OK',
	    '{chr}/{chr}.PhaseWithRef.OK'
    output:
	    '{chr}/{chr}.Final.OK'
    params:
        myDir='{chr}/{chr}',
        bedFile=config['users']['targetBed']
    threads:
        1
    run:
        shell("{APP}/vcftools --gzvcf {params.myDir}.PhaseNoRef.vcf.gz --bed {params.bedFile} --stdout --recode --recode-INFO-all | bgzip -c > {params.myDir}.PhaseNoRef.target.vcf.gz"),
        shell("{APP}/vcftools --gzvcf {params.myDir}.PhaseWithRef.vcf.gz --exclude-bed {params.bedFile} --stdout --recode --recode-INFO-all | bgzip -c > {params.myDir}.PhaseWithRef.offtarget.vcf.gz"),
        shell("{APP}/vcf-concat {params.myDir}.PhaseNoRef.target.vcf.gz {params.myDir}.PhaseWithRef.offtarget.vcf.gz |  bgzip -c > {params.myDir}.tmp.vcf.gz"),
        shell("{APP}/vcf-sort {params.myDir}.tmp.vcf.gz  |  bgzip -c > {params.myDir}.Final.vcf.gz"),
        shell("rm -rf {params.myDir}.tmp.vcf.gz  {params.myDir}.PhaseNoRef.target.vcf.gz   {params.myDir}.PhaseWithRef.offtarget.vcf.gz")
        shell("touch  {params.myDir}.Final.OK")



rule phasingWithoutRef:
    """ phasing without reference using beagle 
    """  
    input:
        lambda wildcards: expand('{chr}/chr{chr}.phasingNoRef.{ID}.vcf.gz', chr=wildcards.chr, ID=chr_split[wildcards.chr])  
    output:
        '{chr}/{chr}.PhaseNoRef.OK'
    params:
        mychr='{chr}',
        javaOption='-Xmx10g'
    threads:
        1
    run:
        vcf=orderVCF({input}),
        shell("java -jar {params.javaOption} {APP}/mergevcf.jar {params.mychr} {vcf} | bgzip -c > {params.mychr}/{params.mychr}.PhaseNoRef.vcf.gz"),
        shell("touch {params.mychr}/{params.mychr}.PhaseNoRef.OK") 



rule phasingWithoutRef_parallel:
    """ phasing without reference using beagle for each region
    """  
    input:
        '{chr}/chr{chr}.Split.{ID}.vcf.gz'
    output:
        '{chr}/chr{chr}.phasingNoRef.{ID}.vcf.gz'
    params:
        resourcePath=config['users']['geneticMap'],
        javaOption='-Xmx10g',
        prefix='{chr}/chr{chr}.phasingNoRef.{ID}',
        mychr='{chr}'
    threads:
        12
    run: 
        if os.path.exists("{output}.OK"):
           print("No need to run this step now...")
        else:
            shell("java -jar {params.javaOption} {APP}/beagle.27Jul16.86a.jar"
              " gl={input}  impute=false modelscale=2  nthreads=12   gprobs=true"
              " map={params.resourcePath}/plink.chr{params.mychr}.GRCh37.map"
              " chrom={params.mychr}"
              " niterations=0  out={params.prefix}"),
            shell("touch {output}.OK")



rule phasingWithRef:
    """ phasing  reference using beagle 
    """  
    input:
        lambda wildcards: expand('{chr}/chr{chr}.phasingWithRef.{job}.vcf.gz', chr=wildcards.chr, job=chr_split[wildcards.chr])  
    output:
        '{chr}/{chr}.PhaseWithRef.OK'
    params:
        mychr='{chr}',
        javaOption='-Xmx20g'
    threads:
        1
    run:
        vcf=orderVCF({input}),
        shell("java -jar {params.javaOption} {APP}/mergevcf.jar {params.mychr} {vcf} | bgzip -c > {params.mychr}/{params.mychr}.PhaseWithRef.vcf.gz"),
        shell("touch {params.mychr}/{params.mychr}.PhaseWithRef.OK") 



rule phasingWithRef_parallel:
    """ phasing using beagle for each sub-region
    """  
    input:
        '{chr}/chr{chr}.Split.{job}.vcf.gz'
    output:
        '{chr}/chr{chr}.phasingWithRef.{job}.vcf.gz'
    params:
        geneticPath=config['users']['geneticMap'],
        refPanelPath=config['users']['1KG3_panel'],
        javaOption='-Xmx36g',
        prefix='{chr}/chr{chr}.phasingWithRef.{job}',
        mychr='{chr}'
    threads:
        24
    run: 
        if os.path.exists("{output}.OK"):
           print("No need to run this step now...")
        else:
            shell("java -jar {params.javaOption} {APP}/beagle.27Jul16.86a.jar"
              " gl={input}  impute=false modelscale=2  nthreads=24   gprobs=true"
              " map={params.geneticPath}/plink.chr{params.mychr}.GRCh37.map"
              " chrom={params.mychr}"
              " ref={params.refPanelPath}/ALL.chr{params.mychr}.phase3.20130502.SNP.indel.biallelic.mac5.vcf.gz"
              " niterations=0  out={params.prefix}"),
            shell("touch {output}.OK")
