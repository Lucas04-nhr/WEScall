# standard library imports
#
import os
import glob
import subprocess
import shutil
import glob
import re

# third party imports
#
from snakemake.utils import report

# project specific imports
# #################################################

LIB_PATH = os.path.abspath(
	os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)),"..", "lib"))

if LIB_PATH not in sys.path:
	sys.path.insert(0, LIB_PATH)


# FIX ME 
# non-login bash
shell.executable("/bin/bash")
#shell.prefix("source rc/snakemake_env.rc;")
#include: "../rules/logging.rules"
#include: "../rules/report.rules"

CHRS = str(config['users']['chrs']).split(',')
dir_snakefile  = os.path.dirname(os.path.realpath(workflow.snakefile)) 
APP  = os.path.join(dir_snakefile, "../../apps")
SCRIPT = os.path.join(dir_snakefile, "../lib")
REFPANEL = config['users']['1KG3_panel']

def atoi(text):
    return int(text) if text.isdigit() else text

def natural_keys(text):

    if re.search("phasing",text):
        text=re.split('/', text)[-1]
        return [atoi(re.split('\.', text)[2])]
    else:
        text=re.split('/', text)[-1]
        return [atoi(re.split('_', text)[2])]

def orderVCF(para):
    item=list(para.pop())
    item.sort(key=natural_keys)
    return ' '.join(item)

def get_bcf_fn_list(wildcards):
	checkpoint_output=checkpoints.VarDetect.get(**wildcards).output.bcf

	return expand("out/paste/{chr}/{chr}_{interval}_paste.bcf",
		chr=wildcards.chr,
		interval=glob_wildcards(os.path.join(checkpoint_output,
			"{chr}_{interval,\d+_\d+}_paste.bcf")).interval)


# constrain chromosome wildcards to be 1..22 and X
wildcard_constraints:
	chr="[1-9]|1[0-9]|2[0-2]|X"

rule alls:
	input:
		expand("{chr}/{chr}.Filter.OK", chr=CHRS)

rule bcfMerge:
	""" Merge bcf files into one vcf file per chromosome
	"""   
	input:
		bcf=get_bcf_fn_list,
		flag='out/svm/BuildModel.OK'
	output:
		touch('{chr}/bcfMerge.{chr}.OK'),
		vcf='{chr}/{chr}.all.vcf.gz'
	log:
		'{chr}/bcfMerge.{chr}.log'
	threads:
		1
	run:
		shell("mkdir -p {wildcards.chr}"),
		vcf=orderVCF({input.bcf}),
		shell("{APP}/bcftools concat {vcf} -o {output.vcf} -Oz >& {log}"),


rule apply_SVM_filter:
	input:
		vcf="{chr}/{chr}.all.vcf.gz",
		flag='{chr}/bcfMerge.{chr}.OK',
		ref_vcf=config['users']['1KG3_panel']+"ALL.chr{chr}.phase3.20130502.SNP.biallelic.MAF0.01.sites.vcf.gz",
		site="out/svm/0_1_0_milk_svm.sites.vcf.gz"
	output:
		vcf='{chr}/{chr}.Filter.vcf.gz',
		flag=touch('{chr}/{chr}.Filter.OK')
	threads:
		1  
	run:
		shell("perl {dir_snakefile}/apply_SVM_filter.pl --invcf {input.vcf} --removeLst {input.site} " 
		 " --keepLst {input.ref_vcf} " 
		 " --out {output.vcf} --type WES")


rule svmBuildModel_target:
	input:
		"out/aux/milk/target.milk.sites.vcf.gz.OK"
	output:
		flag=touch('out/svm/BuildModel.OK'),
		site="out/svm/0_1_0_milk_svm.sites.vcf.gz"
	threads:
		1
	run:
		shell("cat out/aux/union/*.txt > out/svm/denovo.sites.txt"),
		shell("perl {dir_snakefile}/scripts/step3b-run-svm-milk-filter.WES.pl 0")


rule getVCF_target:
	input:
		expand('out/aux/milk/milk.{chr}.{chr}.Milk.OK', chr=CHRS)
	output:
		site_vcf='out/aux/milk/target.milk.sites.vcf.gz',
		flag=touch("out/aux/milk/target.milk.sites.vcf.gz.OK")
	params:
		bedFile=config['users']['targetBed']
	threads:
		1
	run:
		shell("{APP}/vcf-concat out/aux/milk/*_milk.sites.vcf.gz | gzip -c > out/aux/milk/chrAll.milk.sites.vcf.gz"),
		shell("{APP}/vcftools --gzvcf out/aux/milk/chrAll.milk.sites.vcf.gz --bed {params.bedFile} --recode --recode-INFO-all --stdout | {APP}/bgzip -c > {output.site_vcf}")


checkpoint VarDetect:
	output:
		flag='out/aux/milk/milk.{chr}.{chr}.Milk.OK',
		bcf=directory("out/paste/{chr}")
	params:
		step1_cpu=10,
		step2_cpu=100,
		step3_cpu=10,
	threads:
		1
	run:
		shell("perl {dir_snakefile}/scripts/step1-3a.pl WES {wildcards.chr} {REFPANEL} {params.step1_cpu} {params.step2_cpu} {params.step3_cpu}");
